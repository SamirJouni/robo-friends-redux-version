{"version":3,"sources":["reducers.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","actions.js","constants.js","registerServiceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","style","height","width","overflowY","paddingRight","map","user","components_Card","key","SearchBox","onSearch","type","placeholder","onFocus","event","target","onBlur","onChange","Scroll","props","overflow","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","handleRequestRobots","_this$props","handleSearch","filteredRobots","filter","robot","toLocaleLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","e","payload","value","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","compose","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4849c7be.chunk.js","sourcesContent":["import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsearchField: action.payload\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisPending: true\r\n\t\t\t}\r\n\r\n\t\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\trobots: action.payload,\r\n\t\t\t\t\tisPending: false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...state,\r\n\t\t\t\t\t\terror: action.payload,\r\n\t\t\t\t\t\tisPending: false\r\n\t\t\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className=\"bg-light-green-custom dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"avatar\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\theight: \"55vh\",\r\n\t\t\t\twidth: \"110vw\",\r\n\t\t\t\toverflowY: \"scroll\",\r\n\t\t\t\tpaddingRight: \"10vw\"\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{robots.map(user => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={user.id}\r\n\t\t\t\t\t\tid={user.id}\r\n\t\t\t\t\t\tname={user.name}\r\n\t\t\t\t\t\temail={user.email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearch }) => {\r\n\tconst placeholder = \"Search Robots\";\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"pa2 \">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonFocus={event => (event.target.placeholder = \"\")}\r\n\t\t\t\tonBlur={event => (event.target.placeholder = placeholder)}\r\n\t\t\t\tonChange={onSearch}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\theight: \"100%\",\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\toverflow: \"hidden\"\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.hasError) {\r\n      return <h1>Our Robots Are Down. We Are Trying To Fix Them...</h1>\r\n    }\r\n\r\n    return (this.props.children);\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {setSearchField, requestRobots} from \"../actions\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.handleRequestRobots();\r\n  }\r\n\r\n  render() {\r\n\t\tconst { searchField, handleSearch, robots, isPending } = this.props;\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot\r\n        .name\r\n        .toLocaleLowerCase()\r\n        .includes(searchField.toLocaleLowerCase());\r\n    });\r\n\r\n    if (isPending) {\r\n      return <h1 className=\"tc roboTitle\">Loading...</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"roboTitle\">RoboFriends</h1>\r\n          <SearchBox onSearch={handleSearch}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleSearch : e => dispatch(setSearchField(e.target.value)),\r\n    handleRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({\r\n\t\ttype: REQUEST_ROBOTS_PENDING\r\n\t});\r\n\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => dispatch({\r\n\t\t\ttype: REQUEST_ROBOTS_SUCCESS,\r\n\t\t\tpayload: users\r\n\t\t}))\r\n\t\t.catch(error => dispatch({\r\n\t\t\ttype: REQUEST_ROBOTS_FAILED,\r\n\t\t\tpayload: error\r\n\t\t}));\r\n};","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\n\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// In production, we register a service worker to serve assets from local cache.\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background. To learn more about the\r\n// benefits of this model, read https://goo.gl/KwvDNy. This link also includes\r\n// instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin from\r\n      // what our page is served on. This might happen if a CDN is used to serve\r\n      // assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or\r\n        // not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the service\r\n        // worker/PWA documentation.\r\n        navigator\r\n          .serviceWorker\r\n          .ready\r\n          .then(() => {\r\n            console.log('This web app is being served cache-first by a service worker. To learn more, vis' +\r\n              'it https://goo.gl/SC7cgQ');\r\n          });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator\r\n    .serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and the fresh content\r\n              // will have been added to the cache. It's the perfect time to display a \"New\r\n              // content is available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached. It's the perfect time to\r\n              // display a \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl).then(response => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\r\n      // No service worker found. Probably a different app. Reload the page.\r\n      navigator\r\n        .serviceWorker\r\n        .ready\r\n        .then(registration => {\r\n          registration\r\n            .unregister()\r\n            .then(() => {\r\n              window\r\n                .location\r\n                .reload();\r\n            });\r\n        });\r\n    } else {\r\n      // Service worker found. Proceed as normal.\r\n      registerValidSW(swUrl);\r\n    }\r\n  }).catch(() => {\r\n    console.log('No internet connection found. App is running in offline mode.');\r\n  });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator\r\n      .serviceWorker\r\n      .ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport 'tachyons';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({\r\n  searchRobots,\r\n  requestRobots\r\n});\r\nconst store = createStore (rootReducer,\r\n  compose(applyMiddleware(thunkMiddleware, logger)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}